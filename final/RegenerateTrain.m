function newTrain = RegenerateTrain(startStation, endStation, previousTrain, trainLength)
    pauseTime = 20;
    if endStation.id == 10
        pauseTime = 40;
    end
    distBetweenStations = sqrt((endStation.pos_x - startStation.pos_x)^2 + ...
                               (endStation.pos_y - startStation.pos_y)^2);
    numOfME_getOn = poissrnd(startStation.lambda_in);
    while numOfME_getOn == 0 % At least 1 passenger will get on train at each station
        numOfME_getOn = poissrnd(startStation.lambda_in); 
    end
    numOfME_getOff = poissrnd(startStation.lambda_out);
    if numOfME_getOff > previousTrain.numOfME
        numOfME_getOff = previousTrain.numOfME;
    end
    numOfME_stay = previousTrain.numOfME - numOfME_getOff;
    numOfME_newTrain = numOfME_stay + numOfME_getOn;
    newTrain = Train(previousTrain.id, startStation.id, endStation.id, ...
                     numOfME_newTrain, previousTrain.largestID_ME + 1);
    MEtoStay = randperm(previousTrain.numOfME, numOfME_stay);
    for i = 1:numOfME_stay
        newTrain.car{1, i} = previousTrain.car{1, MEtoStay(i)};
    end
    R = -(trainLength/2) + trainLength*rand(1, numOfME_getOn);
    for j = 1 : numOfME_getOn
        unitVector_start_end_x = (endStation.pos_x - startStation.pos_x)/distBetweenStations;
        unitVector_start_end_y = (endStation.pos_y - startStation.pos_y)/distBetweenStations;
        newTrain.car{1, j + numOfME_stay} = MobileEquipment((j - 1 + newTrain.ME_startingID), ...
                                                            startStation.id, ...
                                                            endStation.id, ...
                                                            startStation.pos_x + R(j)*unitVector_start_end_x, ...
                                                            startStation.pos_y + R(j)*unitVector_start_end_y, ...
                                                            unitVector_start_end_x, ...
                                                            unitVector_start_end_y, ...
                                                            0, ...
                                                            1, ...
                                                            pauseTime, ...
                                                            R(j)*unitVector_start_end_x, ...
                                                            R(j)*unitVector_start_end_y);
    end
end